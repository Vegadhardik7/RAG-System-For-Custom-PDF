# Retrieval-Augmented Generation (RAG) Q&A System for PDF Documents

## Overview

This project implements a Retrieval-Augmented Generation (RAG) system designed to answer questions about the content of a PDF document, specifically the "consitution-of-India.pdf" file. The system leverages Google Gemini models for text generation and embeddings, and uses DataStax Astra DB as a vector store to manage and retrieve document chunks efficiently. By combining document retrieval with generative AI, it provides accurate and contextually relevant answers through an interactive command-line interface.

The script processes the PDF, extracts its text, splits it into manageable chunks, and stores these chunks in a vector database. When you ask a question, the system retrieves relevant sections of the document and uses the Gemini model to generate a clear and concise answer.

## Features

- **PDF Text Extraction**: Extracts raw text from the specified PDF file ("consitution-of-India.pdf").
- **Text Chunking**: Splits large text into smaller chunks for efficient processing and storage.
- **Vector Storage**: Stores text chunks and their embeddings in Astra DB for fast retrieval.
- **Contextual Question Answering**: Retrieves relevant document sections and generates answers using Google Gemini models.
- **Interactive Interface**: Allows users to ask questions via a command-line prompt and receive immediate responses.
- **Configurable Parameters**: Adjustable text chunking and model settings for customization.

## Requirements

To run this script, you need the following:

### Software
- **Python**: Version 3.8 or higher.
- **Python Packages**:
  - `python-dotenv`: For loading environment variables.
  - `langchain`: Core framework for building the RAG system.
  - `langchain-google-genai`: For Google Gemini model integration.
  - `langchain-community`: For Astra DB vector store integration.
  - `PyPDF2`: For extracting text from PDF files.
  - `cassio`: For connecting to Astra DB.

### Accounts and Credentials
- **Google Cloud Account**: Required for accessing Google Gemini models. Obtain an API key from the [Google Cloud Console](https://console.cloud.google.com/).
- **Astra DB Account**: Required for vector storage. Sign up at [DataStax Astra DB](https://www.datastax.com/products/datastax-astra) and create a database with a table named "qa_mini_demo".
- **PDF File**: The script expects a file named "consitution-of-India.pdf" in the same directory. Ensure this file is present or update the script with the correct file path.

### Environment Variables
The script requires the following environment variables to be set:
| Variable Name                        | Description                                                                 |
|--------------------------------------|-----------------------------------------------------------------------------|
| `GOOGLE_API_KEY`                     | Your Google API key for accessing Gemini models.                            |
| `ASTRA_DB_APPLICATION_TOKEN`         | Your Astra DB application token for database access.                        |
| `ASTRA_DB_ID`                        | Your Astra DB database ID.                                                 |
| `ASTRA_DB_SECURE_CONNECT_BUNDLE_PATH`| Local path to your Astra DB secure connect bundle (.zip file).              |

## Installation

Follow these steps to set up the project:

1. **Clone the Repository** (if applicable):
   ```bash
   git clone https://github.com/your-repo/rag-qa-system.git
   cd rag-qa-system
   ```

2. **Install Python Packages**:
   Install the required dependencies using pip:
   ```bash
   pip install python-dotenv langchain langchain-google-genai langchain-community PyPDF2 cassio
   ```

3. **Set Up Environment Variables**:
   Create a `.env` file in the project root directory with the following content:
   ```
   GOOGLE_API_KEY=your_google_api_key
   ASTRA_DB_APPLICATION_TOKEN=your_astra_db_token
   ASTRA_DB_ID=your_astra_db_id
   ASTRA_DB_SECURE_CONNECT_BUNDLE_PATH=path/to/secure-connect-bundle.zip
   ```
   Replace the placeholders with your actual credentials. Ensure the secure connect bundle file is accessible at the specified path.

4. **Set Up Astra DB**:
   - Log in to your Astra DB account.
   - Create a database and ensure a table named "qa_mini_demo" exists in the appropriate keyspace.
   - Obtain the application token, database ID, and secure connect bundle from the Astra DB dashboard. Refer to the [Astra DB documentation](https://docs.datastax.com/en/astra/docs/) for detailed instructions.

5. **Prepare the PDF File**:
   Place the "consitution-of-India.pdf" file in the same directory as the script. If using a different PDF, update the filename in the script’s `PdfReader` initialization.

## Usage

To run the script and start asking questions:

1. **Run the Script**:
   ```bash
   python rag_qa_system.py
   ```

2. **Interact with the System**:
   - When prompted with "Your Question: ", type a question related to the content of the PDF.
   - The system will retrieve relevant sections from the PDF and generate an answer using the Google Gemini model.
   - To exit the program, type `exit` at the prompt.

### Example Interaction
```
Your Question: What are the fundamental rights guaranteed by the Constitution of India?
AI Answer: The Constitution of India guarantees six fundamental rights: Right to Equality, Right to Freedom, Right against Exploitation, Right to Freedom of Religion, Cultural and Educational Rights, and Right to Constitutional Remedies.
Your Question: exit
```

## How It Works

The script follows these steps to process the PDF and answer questions:

1. **Loads Environment Variables**: Retrieves API keys and database credentials from the `.env` file.
2. **Extracts PDF Text**: Uses `PyPDF2` to extract raw text from "consitution-of-India.pdf".
3. **Initializes Astra DB**: Connects to Astra DB using the provided token and database ID.
4. **Sets Up Google Gemini Models**:
   - Initializes a Gemini language model ("gemini-2.5-flash") for answer generation.
   - Initializes a Gemini embedding model ("models/embedding-001") for creating text embeddings.
5. **Configures Vector Store**: Sets up Astra DB as a vector store to store text chunks and their embeddings.
6. **Splits Text**: Divides the extracted text into chunks (1000 characters with 200-character overlap) for efficient processing.
7. **Stores Chunks**: Adds text chunks and their embeddings to the Astra DB vector store.
8. **Creates Retriever**: Builds a retriever to fetch relevant chunks based on query embeddings.
9. **Defines Prompt Template**: Creates a conversational prompt for the RAG system, combining context and user questions.
10. **Builds RAG Chain**: Combines the retriever and language model to form a chain that retrieves context and generates answers.
11. **Interactive Loop**: Prompts the user for questions, retrieves relevant context, and displays AI-generated answers.

## Configuration Options

You can customize the script by adjusting the following parameters:

- **Text Splitting**:
  - **Chunk Size**: Set to 1000 characters by default. Modify in the `RecursiveCharacterTextSplitter` initialization to change how text is divided.
  - **Chunk Overlap**: Set to 200 characters to ensure context continuity. Adjust as needed.
  ```python
  text_splitter = RecursiveCharacterTextSplitter(
      chunk_size=1000,
      chunk_overlap=200,
      length_function=len
  )
  ```

- **Model Selection**:
  - The script uses the "gemini-2.5-flash" model for text generation. You can replace it with other Gemini models supported by `langchain-google-genai`.
  - The embedding model is "models/embedding-001". Ensure compatibility with your use case.

- **Astra DB Table**: The script assumes a table named "qa_mini_demo". Update the `table_name` in the `Cassandra` initialization if using a different table.

## Troubleshooting

| Issue | Solution |
|-------|----------|
| **API Key Errors** | Verify that `GOOGLE_API_KEY` is correctly set in the `.env` file and that you have access to Gemini models. |
| **Astra DB Connection Issues** | Ensure `ASTRA_DB_APPLICATION_TOKEN`, `ASTRA_DB_ID`, and `ASTRA_DB_SECURE_CONNECT_BUNDLE_PATH` are correct, and the "qa_mini_demo" table exists. |
| **PDF Not Found** | Confirm that "consitution-of-India.pdf" is in the script’s directory or update the file path in the script. |
| **Module Not Found** | Run `pip install` for all required packages listed in the Installation section. |
| **General Errors** | Check the console for error messages. The script includes logging to help diagnose issues. |

For additional support, refer to:
- [LangChain Documentation](https://python.langchain.com/docs/)
- [Google Gemini API Documentation](https://cloud.google.com/api-docs)
- [Astra DB Documentation](https://docs.datastax.com/en/astra/docs/)

## Contributing

Contributions are welcome! To contribute:
1. Fork the repository.
2. Create a new branch for your changes.
3. Submit a pull request with a clear description of your improvements.

## License

This project is licensed under the MIT License. See the `LICENSE` file for details (if applicable).